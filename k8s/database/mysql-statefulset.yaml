apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: database
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
#          image: public.ecr.aws/docker/library/mysql:8.0.33-debian
#          image: public.ecr.aws/docker/library/mysql:8.0.33
          image: public.ecr.aws/docker/library/mysql:8.0.29
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate mysql server-id from pod ordinal index.
              [[ `uname -n` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # Copy my.cnf file from config-map to conf-2 volume(emptyDir).
              cp /mnt/config-map/my.cnf /mnt/conf-2/
              # Copy appropriate conf.d files from config-map to emptyDir.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/primary.cnf /mnt/conf.d/
                #echo "Waiting for MySQL server to be ready..."
                #while ! mysqladmin ping --host=mysql.database --user=root --password='' --silent; do
                #  sleep 1
                #done
                #echo "Preparing schema..."
                #mysql --host=mysql.database -e "MASTER_USER='root', MASTER_PASSWORD='', MASTER_CONNECT_RETRY=10" < /initdb.d/ddl.sql
                #echo "Initializing data..."
                #mysql --host=mysql.database -e "MASTER_USER='root', MASTER_PASSWORD='', MASTER_CONNECT_RETRY=10" < /initdb.d/init.sql
              else
                cp /mnt/config-map/replica.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: conf-2
              mountPath: /mnt/conf-2
            - name: config-map
              mountPath: /mnt/config-map
            - name: init-script-volume
              mountPath: /initdb.d
        - name: clone-mysql
#          image: gcr.io/google-samples/xtrabackup:1.0
          image: hiroaki2020/dtuj_xtrabackup:1.0
#          image: public.ecr.aws/neuron-devops/xtrabackup:8.0.27
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Skip the clone if data already exists.
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # Skip the clone on primary (ordinal index 0).
              [[ `uname -n` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # Clone data from previous peer.
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              touch ./xtrabackup_checkpoints
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: conf-2
              mountPath: /etc/mysql
      containers:
        - name: mysql
#          image: public.ecr.aws/docker/library/mysql:8.0.33-debian
#          image: public.ecr.aws/docker/library/mysql:8.0.33
          image: public.ecr.aws/docker/library/mysql:8.0.29
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "1"
          args:
            - '--default-authentication-plugin=mysql_native_password'
#          env:
#            - name: MYSQL_ROOT_PASSWORD
#              value: root
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: init-script-volume
              mountPath: /initdb.d
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
#              command: ["mysql", "-h", "127.0.0.1", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
#              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
        - name: xtrabackup
#          image: gcr.io/google-samples/xtrabackup:1.0
          image: hiroaki2020/dtuj_xtrabackup:1.0
#          image: public.ecr.aws/neuron-devops/xtrabackup:8.0.27
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          ports:
            - name: xtrabackup
              containerPort: 3307
          command:
            - bash
            - "-c"
            - |
              set -ex
              cd /var/lib/mysql
              
              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
                cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
                # Ignore xtrabackup_binlog_info in this case (it's useless).
                rm -f xtrabackup_slave_info xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from primary. Parse binlog position.
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                rm -f xtrabackup_binlog_info xtrabackup_slave_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi
              
              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
              
                echo "Initializing replication from clone position"
                mysql -h 127.0.0.1 \
                      -e "$(<change_master_to.sql.in), \
                              MASTER_HOST='mysql-0.mysql', \
                              MASTER_USER='root', \
                              MASTER_PASSWORD='', \
                              MASTER_CONNECT_RETRY=10; \
                            START SLAVE;" || exit 1
                # In case of container restart, attempt this at-most-once.
                mv change_master_to.sql.in change_master_to.sql.orig
              fi
              
              # Start a server to send backups when requested by peers.
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: conf-2
              mountPath: /etc/mysql
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 100Mi
      volumes:
        - name: conf
          emptyDir: {}
        - name: conf-2
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql
        - name: init-script-volume
          configMap:
            name: mysql-init-script
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: mysql-sc
        resources:
          requests:
            storage: 1Gi
